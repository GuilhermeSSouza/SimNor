
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'rightEqualleftEqualityDifferentleftPLUSMinusleftMultiplyDivideArray COMMA DEF Different Divide EXTERN Else Equal Equality GLOBID If LBracket LParen LSquare Minus Multiply PLUS Print RBracket RParen RSquare Return Semicolon While int lit noalias ref voidprog : funcs\n          | externs funcsexterns : extern\n             | extern externsfuncs : func\n           | func funcsextern : EXTERN TYPE GLOBID LParen RParen Semicolonextern : EXTERN TYPE GLOBID LParen tdecls RParen Semicolonfunc : DEF TYPE GLOBID LParen RParen blkfunc : DEF TYPE GLOBID LParen vdecls RParen blkblk : LBracket stmts RBracketblk : LBracket RBracketstmts : stmt\n           | stmt stmtsstmt : blkstmt : Return Semicolon\n          | Return exp Semicolonstmt : vdecl Equal exp Semicolonstmt : exp Semicolonstmt : While LParen exp RParen stmtstmt : If LParen exp RParen stmt\n          | If LParen exp RParen stmt Else stmtstmt : Print exp Semicolonstmt : GLOBID Equal Vector Semicolon Vector : Array LSquare  RSquare\n            | Array LSquare lit RSquare\n            | Array LSquare GLOBID RSquare exps : exp\n           | exp COMMA expsexp : LParen exp RParenexp : litexp : binopexp : GLOBIDexp : GLOBID expWrapperexpWrapper : LParen RParen\n                | LParen exps RParenbinop : exp Multiply exp\n           | exp PLUS exp\n           | exp Divide exp\n           | exp Minus exp\n           | GLOBID Equal exp\n           | exp Equality exp\n           | exp Different expvdecls : vdecl COMMA vdecls\n            | vdeclvdecl : TYPE GLOBIDtdecls : TYPE\n            | TYPE COMMA tdeclsTYPE : int\n          | voidTYPE : ref TYPETYPE : noalias ref TYPE'
    
_lr_action_items = {'DEF':([0,3,4,5,10,32,37,40,53,56,57,],[6,6,6,-3,-4,-9,-7,-12,-10,-8,-11,]),'EXTERN':([0,5,37,56,],[7,7,-7,-8,]),'$end':([1,2,4,8,9,32,40,53,57,],[0,-1,-5,-2,-6,-9,-12,-10,-11,]),'int':([6,7,14,19,21,23,33,35,36,40,41,42,57,59,62,77,89,96,97,98,99,103,104,109,112,],[12,12,12,12,12,12,12,12,12,-12,12,-15,-11,-16,-19,-17,-23,-18,12,12,-24,-20,-21,12,-22,]),'void':([6,7,14,19,21,23,33,35,36,40,41,42,57,59,62,77,89,96,97,98,99,103,104,109,112,],[13,13,13,13,13,13,13,13,13,-12,13,-15,-11,-16,-19,-17,-23,-18,13,13,-24,-20,-21,13,-22,]),'ref':([6,7,14,15,19,21,23,33,35,36,40,41,42,57,59,62,77,89,96,97,98,99,103,104,109,112,],[14,14,14,19,14,14,14,14,14,14,-12,14,-15,-11,-16,-19,-17,-23,-18,14,14,-24,-20,-21,14,-22,]),'noalias':([6,7,14,19,21,23,33,35,36,40,41,42,57,59,62,77,89,96,97,98,99,103,104,109,112,],[15,15,15,15,15,15,15,15,15,-12,15,-15,-11,-16,-19,-17,-23,-18,15,15,-24,-20,-21,15,-22,]),'GLOBID':([11,12,13,16,18,22,24,33,40,41,42,43,47,49,57,59,62,63,64,65,66,67,68,69,70,72,74,76,77,78,89,96,97,98,99,100,102,103,104,109,112,],[17,-49,-50,20,-51,-52,31,50,-12,50,-15,61,61,61,-11,-16,-19,61,61,61,61,61,61,61,61,61,61,61,-17,61,-23,-18,50,50,-24,107,61,-20,-21,50,-22,]),'COMMA':([12,13,18,22,27,28,31,51,52,61,75,79,80,81,82,83,84,87,91,93,95,101,],[-49,-50,-51,-52,35,36,-46,-31,-32,-33,-34,-37,-38,-39,-40,-42,-43,-30,-41,-35,102,-36,]),'RParen':([12,13,18,21,22,23,26,27,28,30,31,51,52,54,55,61,71,75,76,79,80,81,82,83,84,86,87,88,91,93,94,95,101,108,],[-49,-50,-51,25,-52,29,34,-45,-47,38,-46,-31,-32,-44,-48,-33,87,-34,93,-37,-38,-39,-40,-42,-43,97,-30,98,-41,-35,101,-28,-36,-29,]),'LParen':([17,20,33,40,41,42,43,46,47,48,49,50,57,59,61,62,63,64,65,66,67,68,69,70,72,74,76,77,78,89,96,97,98,99,102,103,104,109,112,],[21,23,47,-12,47,-15,47,70,47,72,47,76,-11,-16,76,-19,47,47,47,47,47,47,47,47,47,47,47,-17,47,-23,-18,47,47,-24,47,-20,-21,47,-22,]),'LBracket':([25,33,34,40,41,42,57,59,62,77,89,96,97,98,99,103,104,109,112,],[33,33,33,-12,33,-15,-11,-16,-19,-17,-23,-18,33,33,-24,-20,-21,33,-22,]),'Semicolon':([29,38,43,44,50,51,52,60,61,73,75,79,80,81,82,83,84,85,87,90,91,93,101,105,110,111,],[37,56,59,62,-33,-31,-32,77,-33,89,-34,-37,-38,-39,-40,-42,-43,96,-30,99,-41,-35,-36,-25,-26,-27,]),'Equal':([31,45,50,61,],[-46,69,74,78,]),'RBracket':([33,39,40,41,42,57,58,59,62,77,89,96,99,103,104,112,],[40,57,-12,-13,-15,-11,-14,-16,-19,-17,-23,-18,-24,-20,-21,-22,]),'Return':([33,40,41,42,57,59,62,77,89,96,97,98,99,103,104,109,112,],[43,-12,43,-15,-11,-16,-19,-17,-23,-18,43,43,-24,-20,-21,43,-22,]),'While':([33,40,41,42,57,59,62,77,89,96,97,98,99,103,104,109,112,],[46,-12,46,-15,-11,-16,-19,-17,-23,-18,46,46,-24,-20,-21,46,-22,]),'If':([33,40,41,42,57,59,62,77,89,96,97,98,99,103,104,109,112,],[48,-12,48,-15,-11,-16,-19,-17,-23,-18,48,48,-24,-20,-21,48,-22,]),'Print':([33,40,41,42,57,59,62,77,89,96,97,98,99,103,104,109,112,],[49,-12,49,-15,-11,-16,-19,-17,-23,-18,49,49,-24,-20,-21,49,-22,]),'lit':([33,40,41,42,43,47,49,57,59,62,63,64,65,66,67,68,69,70,72,74,76,77,78,89,96,97,98,99,100,102,103,104,109,112,],[51,-12,51,-15,51,51,51,-11,-16,-19,51,51,51,51,51,51,51,51,51,51,51,-17,51,-23,-18,51,51,-24,106,51,-20,-21,51,-22,]),'Else':([40,42,57,59,62,77,89,96,99,103,104,112,],[-12,-15,-11,-16,-19,-17,-23,-18,-24,-20,109,-22,]),'Multiply':([44,50,51,52,60,61,71,73,75,79,80,81,82,83,84,85,86,87,88,91,93,95,101,],[63,-33,-31,-32,63,-33,63,63,-34,-37,63,-39,63,63,63,63,63,-30,63,63,-35,63,-36,]),'PLUS':([44,50,51,52,60,61,71,73,75,79,80,81,82,83,84,85,86,87,88,91,93,95,101,],[64,-33,-31,-32,64,-33,64,64,-34,-37,-38,-39,-40,64,64,64,64,-30,64,64,-35,64,-36,]),'Divide':([44,50,51,52,60,61,71,73,75,79,80,81,82,83,84,85,86,87,88,91,93,95,101,],[65,-33,-31,-32,65,-33,65,65,-34,-37,65,-39,65,65,65,65,65,-30,65,65,-35,65,-36,]),'Minus':([44,50,51,52,60,61,71,73,75,79,80,81,82,83,84,85,86,87,88,91,93,95,101,],[66,-33,-31,-32,66,-33,66,66,-34,-37,-38,-39,-40,66,66,66,66,-30,66,66,-35,66,-36,]),'Equality':([44,50,51,52,60,61,71,73,75,79,80,81,82,83,84,85,86,87,88,91,93,95,101,],[67,-33,-31,-32,67,-33,67,67,-34,-37,-38,-39,-40,-42,-43,67,67,-30,67,67,-35,67,-36,]),'Different':([44,50,51,52,60,61,71,73,75,79,80,81,82,83,84,85,86,87,88,91,93,95,101,],[68,-33,-31,-32,68,-33,68,68,-34,-37,-38,-39,-40,-42,-43,68,68,-30,68,68,-35,68,-36,]),'Array':([74,],[92,]),'LSquare':([92,],[100,]),'RSquare':([100,106,107,],[105,110,111,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'prog':([0,],[1,]),'funcs':([0,3,4,],[2,8,9,]),'externs':([0,5,],[3,10,]),'func':([0,3,4,],[4,4,4,]),'extern':([0,5,],[5,5,]),'TYPE':([6,7,14,19,21,23,33,35,36,41,97,98,109,],[11,16,18,22,24,28,24,24,28,24,24,24,24,]),'vdecls':([21,35,],[26,54,]),'vdecl':([21,33,35,41,97,98,109,],[27,45,27,45,45,45,45,]),'tdecls':([23,36,],[30,55,]),'blk':([25,33,34,41,97,98,109,],[32,42,53,42,42,42,42,]),'stmts':([33,41,],[39,58,]),'stmt':([33,41,97,98,109,],[41,41,103,104,112,]),'exp':([33,41,43,47,49,63,64,65,66,67,68,69,70,72,74,76,78,97,98,102,109,],[44,44,60,71,73,79,80,81,82,83,84,85,86,88,91,95,91,44,44,95,44,]),'binop':([33,41,43,47,49,63,64,65,66,67,68,69,70,72,74,76,78,97,98,102,109,],[52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,]),'expWrapper':([50,61,],[75,75,]),'Vector':([74,],[90,]),'exps':([76,102,],[94,108,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> prog","S'",1,None,None,None),
  ('prog -> funcs','prog',1,'p_prog','lexerAndParser.py',160),
  ('prog -> externs funcs','prog',2,'p_prog','lexerAndParser.py',161),
  ('externs -> extern','externs',1,'p_externs','lexerAndParser.py',168),
  ('externs -> extern externs','externs',2,'p_externs','lexerAndParser.py',169),
  ('funcs -> func','funcs',1,'p_funcs','lexerAndParser.py',177),
  ('funcs -> func funcs','funcs',2,'p_funcs','lexerAndParser.py',178),
  ('extern -> EXTERN TYPE GLOBID LParen RParen Semicolon','extern',6,'p_extern','lexerAndParser.py',187),
  ('extern -> EXTERN TYPE GLOBID LParen tdecls RParen Semicolon','extern',7,'p_externWithTypes','lexerAndParser.py',191),
  ('func -> DEF TYPE GLOBID LParen RParen blk','func',6,'p_func','lexerAndParser.py',196),
  ('func -> DEF TYPE GLOBID LParen vdecls RParen blk','func',7,'p_funcWithParams','lexerAndParser.py',200),
  ('blk -> LBracket stmts RBracket','blk',3,'p_blk','lexerAndParser.py',205),
  ('blk -> LBracket RBracket','blk',2,'p_blkEmpty','lexerAndParser.py',209),
  ('stmts -> stmt','stmts',1,'p_statements','lexerAndParser.py',214),
  ('stmts -> stmt stmts','stmts',2,'p_statements','lexerAndParser.py',215),
  ('stmt -> blk','stmt',1,'p_blkStmt','lexerAndParser.py',224),
  ('stmt -> Return Semicolon','stmt',2,'p_return','lexerAndParser.py',228),
  ('stmt -> Return exp Semicolon','stmt',3,'p_return','lexerAndParser.py',229),
  ('stmt -> vdecl Equal exp Semicolon','stmt',4,'p_vdeclStmt','lexerAndParser.py',237),
  ('stmt -> exp Semicolon','stmt',2,'p_expSemi','lexerAndParser.py',249),
  ('stmt -> While LParen exp RParen stmt','stmt',5,'p_while','lexerAndParser.py',253),
  ('stmt -> If LParen exp RParen stmt','stmt',5,'p_if','lexerAndParser.py',257),
  ('stmt -> If LParen exp RParen stmt Else stmt','stmt',7,'p_if','lexerAndParser.py',258),
  ('stmt -> Print exp Semicolon','stmt',3,'p_print','lexerAndParser.py',265),
  ('stmt -> GLOBID Equal Vector Semicolon','stmt',4,'p_arrayGLOBID','lexerAndParser.py',272),
  ('Vector -> Array LSquare RSquare','Vector',3,'p_vector','lexerAndParser.py',277),
  ('Vector -> Array LSquare lit RSquare','Vector',4,'p_vector','lexerAndParser.py',278),
  ('Vector -> Array LSquare GLOBID RSquare','Vector',4,'p_vector','lexerAndParser.py',279),
  ('exps -> exp','exps',1,'p_exps','lexerAndParser.py',289),
  ('exps -> exp COMMA exps','exps',3,'p_exps','lexerAndParser.py',290),
  ('exp -> LParen exp RParen','exp',3,'p_expParen','lexerAndParser.py',306),
  ('exp -> lit','exp',1,'p_exp','lexerAndParser.py',310),
  ('exp -> binop','exp',1,'p_expBinOpUop','lexerAndParser.py',321),
  ('exp -> GLOBID','exp',1,'p_var','lexerAndParser.py',325),
  ('exp -> GLOBID expWrapper','exp',2,'p_expGlobid','lexerAndParser.py',329),
  ('expWrapper -> LParen RParen','expWrapper',2,'p_expWrapper','lexerAndParser.py',333),
  ('expWrapper -> LParen exps RParen','expWrapper',3,'p_expWrapper','lexerAndParser.py',334),
  ('binop -> exp Multiply exp','binop',3,'p_binop','lexerAndParser.py',342),
  ('binop -> exp PLUS exp','binop',3,'p_binop','lexerAndParser.py',343),
  ('binop -> exp Divide exp','binop',3,'p_binop','lexerAndParser.py',344),
  ('binop -> exp Minus exp','binop',3,'p_binop','lexerAndParser.py',345),
  ('binop -> GLOBID Equal exp','binop',3,'p_binop','lexerAndParser.py',346),
  ('binop -> exp Equality exp','binop',3,'p_binop','lexerAndParser.py',347),
  ('binop -> exp Different exp','binop',3,'p_binop','lexerAndParser.py',348),
  ('vdecls -> vdecl COMMA vdecls','vdecls',3,'p_vdecls','lexerAndParser.py',387),
  ('vdecls -> vdecl','vdecls',1,'p_vdecls','lexerAndParser.py',388),
  ('vdecl -> TYPE GLOBID','vdecl',2,'p_vdeclare','lexerAndParser.py',396),
  ('tdecls -> TYPE','tdecls',1,'p_tdecls','lexerAndParser.py',401),
  ('tdecls -> TYPE COMMA tdecls','tdecls',3,'p_tdecls','lexerAndParser.py',402),
  ('TYPE -> int','TYPE',1,'p_type','lexerAndParser.py',410),
  ('TYPE -> void','TYPE',1,'p_type','lexerAndParser.py',411),
  ('TYPE -> ref TYPE','TYPE',2,'p_refType','lexerAndParser.py',415),
  ('TYPE -> noalias ref TYPE','TYPE',3,'p_refTypeNoAlias','lexerAndParser.py',420),
]
